spring.application.name=Website Builder

server.port=${WEB_SERVER_PORT:80}
# To set up different context path use similar syntax
#  server.servlet.context-path=/resume/
#
server.servlet.context-path=${WEB_SERVER_CONTEXT_PATH:/}

security.admin-user=admin
security.admin-password=password
security.user-user=user
security.user-password=password

# Configuring automatic hot re-deployment
# of the project when one of the files have 
# changed.
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true

#RabbitMQ connection information
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USER:guest}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}

messaging.rabbitmq.protpcol=amqp
messaging.custom.ssl.enable=false


#Java Mail connection information
spring.mail.host=${EMAIL_HOST:smtp.host.com}
spring.mail.port=${EMAIL_PORT:587}
spring.mail.username=${EMAIL_USERNAME:user@host.com}
spring.mail.password=${EMAIL_PASSWORD:password}
spring.mail.properties.mail.smtp.auth=${EMAIL_SMTP_AUTH:true}
spring.mail.properties.mail.smtp.starttls.enable=${EMAIL_STARTTLS_ENABLED:true}
#Enables email debug property
spring.mail.debug=${EMAIL_DEBUG_ENABLED:false}

#Database configuration
spring.datasource.url=${MYSQL_URL:jdbc:mysql://localhost:3306/website_builder_db?createDatabaseIfNotExist=true}
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PASSWORD:pass}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Delaying execution of the initialization SQL sxcript
# until JPA creates the table structure
spring.jpa.defer-datasource-initialization=true

# Enabling intialization mode. Other options are never and embeded 
# always is a good option for test environemnt
# spring.sql.init.mode=always

# IF your schema/data scripts are in format like this
# schema-{platform}.sql you can specify the platform
# 
# spring.sql.init.platform=mysql

# Place DB initialization scripts in this directory
# if you want to initialize DB on start up
# 
# spring.sql.init.schema-locations=classpath:/db/{platform}/schema.sql,classpath:/db/{platform}/another-schema.sql
# spring.sql.init.schema-locations=file:./dev-ops/db/{platform}/create-db.sql
# spring.sql.init.data-locations=file:./dev-ops/db/{platform}/init-db.sql

# JPA Properties
# Enables hibernate to print the generated SQL into standard output. 
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.database=mysql
spring.jpa.database-platform=mysql

# Only used for local development as it drops the schema at the end of the session
# For production, this would be set to "validate" validate the schema, 
# makes no changes to the database
# none: The default for MySQL. No change is made to the database structure.
# update: Hibernate changes the database according to the given entity structures.
# create: Creates the database every time but does not drop it on close.
# create-drop: Creates the database and drops it when SessionFactory closes.
spring.jpa.hibernate.ddl-auto=update

# Logging configuration
logging.level.com.garbuz.resume=DEBUG
#logging.level.root=DEBUG
#logging.level.org.springframework.web=ERROR
#logging.level.org.hibernate=ERROR